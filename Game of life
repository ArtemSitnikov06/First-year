#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int countNeighbors(int **board, int x, int y) {
    int sum = 0;
    for (int i = x - 1; i <= x + 1; i++) {
        for (int j = y - 1; j <= y + 1; j++) {
            sum += board[i][j];
        }
    }
    if (board[x][y] == 1) {
        sum--;
    }
    return sum;
}

unsigned char *makeBmp(int **board, unsigned int height, unsigned int width){
    unsigned char *pixels = (unsigned char *) malloc(height * width * 3);
    int index = 0;
    for (int i = height - 1; i >= 0; i--) {
        for (int j = 0; j < width; j++) {
            if (board[i][j] == 1) {
                pixels[index] = 0;
                pixels[index + 1] = 0;
                pixels[index + 2] = 0;
            } else {
                pixels[index] = 255;
                pixels[index + 1] = 255;
                pixels[index + 2] = 255;
            }
            index += 3;
        }
    }
    return pixels;
}

int** createBoard(unsigned long height, unsigned long width) {
    int** array = (int**) malloc(height * sizeof(int*));
    for (int i = 0; i < height; i++) {
        array[i] = (int*) malloc(width * sizeof(int));
        if(array[i] == NULL){
            return NULL;
        }
    }
    return array;
}

struct imageInfo {
    unsigned long height;
    unsigned long width;
    unsigned long image_offset;
    unsigned char bmp_header[54];
};

int main(int argc, char* argv[]) {
    if(argc < 4){
        fprintf(stderr, "Not enough arguments");
        return 1;
    }
    struct imageInfo info;
    FILE* image;
    long dump_freq = 1;
    long max_iteration = 1000000000;
    char* dirName;

    for (int i = 1; i < argc; i += 2) {
        if (strcmp(argv[i], "--input") == 0) {
            image = fopen(argv[i + 1], "rb");
            if (image == NULL) {
                fprintf(stderr,"Your file did not open");
                return 1;
            }
        }
        else if (strcmp(argv[i], "--output") == 0) {
            dirName = argv[i + 1];
        }
        else if (strcmp(argv[i], "--max_iter") == 0) {
            max_iteration = strtol(argv[i + 1], NULL, 10);
        }
        else if (strcmp(argv[i], "--dump_freq") == 0) {
            dump_freq = strtol(argv[i + 1], NULL, 10);
        }
    }
    fread(info.bmp_header, sizeof(unsigned char), 54, image);
    info.image_offset = info.bmp_header[0xD] << 24 | info.bmp_header[0xC] << 16 | info.bmp_header[0xB] << 8 | info.bmp_header[0xA];
    info.width = info.bmp_header[0x15] << 24 | info.bmp_header[0x14] << 16 | info.bmp_header[0x13] << 8 | info.bmp_header[0x12];
    info.height = info.bmp_header[0x19] << 24 | info.bmp_header[0x18] << 16 | info.bmp_header[0x17] << 8 | info.bmp_header[0x16];

    int **cur_gen = createBoard(info.height, info.width * 3);
    int **next_gen = createBoard(info.height, info.width * 3);
    if((cur_gen == NULL) || (next_gen == NULL)){
        fprintf(stderr,"Memory allocation error");
        return 1;
    }

    fseek(image, info.image_offset, SEEK_SET);


    for (int i = info.height - 1; i >= 0; i--) {
        for (int j = 0; j < info.width; j++) {
            char k = fgetc(image);
            char m = fgetc(image);
            char l = fgetc(image);
            if (k == 0 && m == 0 && l == 0) {
                cur_gen[i][j] = 1;
            }
            else {
                cur_gen[i][j] = 0;
            }
        }
    }
    for (unsigned long i = 0; i < info.height; i++) {
        for (unsigned long j = 0; j < info.width; j++) {
            next_gen[i][j] = cur_gen[i][j];
        }
    }
    unsigned char* pixelInfo;
    int countOfNeighbors;
    for (int gameIteration = 0; gameIteration < max_iteration; gameIteration++) {
        for (unsigned long i = 1; i < info.height - 1; i++) {
            for (unsigned long j = 1; j < info.width - 1; j++) {
                countOfNeighbors = countNeighbors(cur_gen, i, j);

                if (cur_gen[i][j] == 0 && countOfNeighbors == 3) {
                    next_gen[i][j] = 1;
                }
                else if (cur_gen[i][j] == 1) {
                    if (countOfNeighbors < 2 || countOfNeighbors > 3) {
                        next_gen[i][j] = 0;
                    }
                }
            }
        }

        for (unsigned long i = 0; i < info.height; i++) {
            for (unsigned long j = 0; j < info.width; j++) {
                cur_gen[i][j] = next_gen[i][j];
            }
        }

        pixelInfo = makeBmp(cur_gen, info.height, info.width);

        if (gameIteration % dump_freq == 0) {
            char fileName[10];
            char directory[256];
            snprintf(fileName, sizeof(fileName), "%d.bmp", gameIteration+1);
            snprintf(directory, sizeof(directory), "%s/%s", dirName, fileName);

            FILE* new_bmp = fopen(directory, "wb");
            if (new_bmp == NULL) {
                printf("%d game generation creation failed\n", gameIteration+1);
            }
            else {
                printf("%d game generation successfully created\n", gameIteration+1);
            }
            fwrite(info.bmp_header, 1, 54, new_bmp);
            fwrite(pixelInfo, 1, info.width * info.height*3, new_bmp);
        }
    }
    free(cur_gen);
    free(next_gen);
    free(pixelInfo);
    return 0;
}
